@page
@model IndexModel
@{
    //ViewData["Title"] = "Home page";
}




@if (@Model.started)
{
    <p class="paragraph">
        Bitte geben Sie hier eine beliebige Zeichenkette ein. In dieser werden dann alle Vokale durch "i" ersetzt. <br />
        <b>Hinweis: </b>Achten Sie darauf, dass die Zeichenkette <u>mindestens</u> aus 10 Wörtern besteht. <br />
        Sie können die Anwendung jederzeit beenden indem Sie das Wort "exit" eingeben. <br />
        Viel Spaß mit der App :-)
    </p>

    <br />
    <br />

    <form method="post" class="mb-5 pb-5 needs-validation" novalidate>
        <div class="input-group">
            <div class="input-group-prepend">
                <span class="input-group-text">Zeichenkette</span>
            </div>
            <textarea asp-for="inputString" placeholder="Zeichenkette eingeben" class="form-control shadow-lg" aria-label="inputString" id="inputString" required></textarea>
            <div class="invalid-feedback">
                Bitte geben Sie eine Zeichenkette ein. Sonst funktionert das Ganze nicht...
            </div>
        </div>
        <br />
        <button type="submit" class="btn btn-outline-success ml-4 mr-4 w-25 mt-2 shadow-lg" asp-page-handler="Processing">Absenden</button>
        <button type="button" class="btn btn-outline-warning ml-4 mr-4 w-25 mt-2 shadow-lg" onclick="resettingButton()">Zurücksetzen</button>
        <a type="button" class="btn btn-outline-danger ml-4 mr-4 w-25 mt-2 shadow-lg" href="/">Exit</a>
    </form>

    <br />

    @if (@Model.val)
    {
        <div class="jumbotron jumbotron-fluid bg-success my-auto shadow-lg rounded p-4 mt-5 pt-5" id="jumbo">
            <h2 class="display-4 text-light mt-4 mb-4 text-left"> Überarbeitete Zeichenkette </h2>
            <div class="container h-100 d-flex text-left">
                <code class="lead text-light text-left">@ViewData["result"]</code>
            </div>
        </div>
    }
    else if (!@Model.val && @Model.activated)
    {
        <div class="jumbotron jumbotron-fluid bg-danger my-auto shadow-lg rounded p-4 text-light">
            <h2 class="display-4 mt-4 mb-4 text-left"> Überarbeitete Zeichenkette </h2>
            <div class="container h-100 d-flex text-left">
                <span class="lead validation rounded p-1 font-weight-normal text-light" asp-validation-for="inputString"></span>
            </div>
        </div>
    }
}
else
{
    <form method="post">
        <button type="submit" id="startButton" class="btn btn-success btn-lg shadow-lg rounded" asp-page-handler="Starting">Anwendung starten</button>
    </form>
}

<br />

@if (@Model.activated)
{
    <h2 class="display-4 mt-5 pt-5 mb-4">Historie</h2>
    <div class="table-responsive-sm shadow-lg">
        <table class="table table-hover table-striped table-bordered table-success text-light lead ">
            <thead class="bg-success">
                <tr>
                    <th scope="col">Eingegebene Zeichenkette</th>
                    <th scope="col">Überarbeitete Zeichenkette</th>
                </tr>
            </thead>
            @foreach (var entry in @Model.historyOutput)
            {
                <tbody bg-light text-dark>
                    <tr class="text-dark">
                        <td>@entry[0]</td>
                        <td>@entry[1]</td>
                    </tr>
                </tbody>
            }
        </table>
    </div>





    <input type="hidden" value="@Model.aNum" id="aNum" />
    <input type="hidden" value="@Model.eNum" id="eNum" />
    <input type="hidden" value="@Model.iNum" id="iNum" />
    <input type="hidden" value="@Model.oNum" id="oNum" />
    <input type="hidden" value="@Model.uNum" id="uNum" />

    <!--Google Charts-->
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        a = Number(document.getElementById("aNum").value);
        e = Number(document.getElementById("eNum").value);
        o = Number(document.getElementById("oNum").value);
        u = Number(document.getElementById("uNum").value);

        console.log(a);

        google.charts.load('current', { 'packages': ['corechart'] });
        google.charts.setOnLoadCallback(drawChart);

        function drawChart() {

            var data = google.visualization.arrayToDataTable([
                ['Vokal', 'Änderungen'],
                ['a', a],
                ['e', e],
                ['o', o],
                ['u', u]
            ]);

            var options = {
                title: 'Ersetzte Vokale',
                backgroundColor: { fill: 'transparent' },
                titleTextStyle: {
                    color: 'white'
                },
                hAxis: {
                    textStyle: {
                        color: 'white'
                    },
                    titleTextStyle: {
                        color: 'white'
                    }
                },
                vAxis: {
                    textStyle: {
                        color: 'white'
                    },
                    titleTextStyle: {
                        color: 'white'
                    }
                },
                legend: {
                    textStyle: {
                        color: 'white'
                    }
                }
            };

            var chart = new google.visualization.PieChart(document.getElementById('piechart'));

            chart.draw(data, options);
        }
    </script>





    <h2 class="display-4 mt-5 pt-5 mb-4">Statistik</h2>
    <p>Hier erhalten Sie einen Überlblick, welche Vokale wie häufig durch den Vokal "i" ersetzt wurden.</p>
    <div id="piechart" style="width: 100%; height: 500px;"></div>
    
}









<!--Bootstrap Client Side Validation-->
<script>
    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', function (event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();
</script>